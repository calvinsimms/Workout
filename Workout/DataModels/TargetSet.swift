//
//  TargetSet.swift
//  Workout
//
//  Created by Calvin Simms on 2025-10-28.
//

import Foundation
import SwiftData

// MARK: - TargetSet Model
/// Represents a planned or target set for a specific exercise within a workout.
/// Mirrors `WorkoutSet` in structure but is used for planning purposes only.
/// Each `TargetSet` belongs to one `WorkoutExercise`, defining what the user
/// *intends* to perform during that workout.
///
/// Unlike `WorkoutSet`, a `TargetSet` does not store a `date` because it represents
/// a *planned* activity rather than a logged one.
@Model
final class TargetSet: Identifiable, Hashable {

    // MARK: - Identity
    
    /// A unique identifier for each TargetSet.
    /// Ensures reliable persistence and traceability across data operations.
    @Attribute(.unique) var id: UUID

    // MARK: - Ordering
    
    /// Determines the sequence of sets for this exercise within a workout plan.
    /// For example, a `TargetSet` with `order = 0` would be performed first.
    var order: Int

    // MARK: - Target Metrics
    
    /// The target weight to be lifted, if applicable.
    var weight: Double?

    /// The target number of repetitions for this set.
    var reps: Int?

    /// The intended perceived exertion level (e.g., RPE 8.5).
    var rpe: Double?

    /// The expected duration of the set (e.g., for timed cardio or holds).
    var duration: Double?

    /// The target distance (useful for cardio exercises).
    var distance: Double?

    /// Target resistance level for cardio machines or similar equipment.
    var resistance: Double?

    /// Planned average heart rate for the set (useful for cardio zones).
    var heartRate: Int?

    // MARK: - Relationships
    
    /// The `WorkoutExercise` this TargetSet belongs to.
    /// This defines the "many" side of the relationship where a single
    /// `WorkoutExercise` can contain multiple TargetSets.
    ///
    /// Cascade deletion is handled from the parent (`WorkoutExercise`)
    /// side of the relationship.
    @Relationship(inverse: \WorkoutExercise.targetSets) var workoutExercise: WorkoutExercise

    // MARK: - Initializer
    
    /// Initializes a new TargetSet instance with default or provided values.
    /// - Parameters:
    ///   - id: Unique identifier (auto-generated by default).
    ///   - order: Display or sequence order for this set.
    ///   - weight: Target weight (optional).
    ///   - reps: Target repetitions (optional).
    ///   - rpe: Target RPE (optional).
    ///   - duration: Target duration (optional).
    ///   - distance: Target distance (optional).
    ///   - resistance: Target resistance (optional).
    ///   - heartRate: Target average heart rate (optional).
    ///   - workoutExercise: The parent `WorkoutExercise` this set belongs to.
    init(
        id: UUID = UUID(),
        order: Int = 0,
        weight: Double? = nil,
        reps: Int? = nil,
        rpe: Double? = nil,
        duration: Double? = nil,
        distance: Double? = nil,
        resistance: Double? = nil,
        heartRate: Int? = nil,
        workoutExercise: WorkoutExercise
    ) {
        self.id = id
        self.order = order
        self.weight = weight
        self.reps = reps
        self.rpe = rpe
        self.duration = duration
        self.distance = distance
        self.resistance = resistance
        self.heartRate = heartRate
        self.workoutExercise = workoutExercise
    }

    // MARK: - Hashable & Equatable Conformance
    
    /// Two TargetSets are equal if their UUIDs match.
    static func == (lhs: TargetSet, rhs: TargetSet) -> Bool {
        lhs.id == rhs.id
    }

    /// Hashes the unique identifier for fast lookups and SwiftUI diffing.
    func hash(into hasher: inout Hasher) {
        hasher.combine(id)
    }
}
